apiVersion: batch/v1
kind: Job
metadata:
  name: cert-gen
  namespace: monitoring
  annotations:
    argocd.argoproj.io/sync-wave: "0"
spec:
  template:
    spec:
      serviceAccountName: cert-gen-sa
      containers:
      - name: cert-gen
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Установка OpenSSL и kubectl
          apk add --no-cache openssl curl bash
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/

          # Генерация CA сертификата
          mkdir -p /certs
          openssl genrsa -out /certs/ca.key 4096
          openssl req -x509 -new -nodes -key /certs/ca.key -sha256 -days 3650 -out /certs/ca.crt -subj "/C=US/ST=CA/L=San Francisco/O=Elastic/OU=IT/CN=ElasticSearch-CA"

          # Генерация сертификата для Elasticsearch
          openssl genrsa -out /certs/elasticsearch.key 4096
          openssl req -new -key /certs/elasticsearch.key -out /certs/elasticsearch.csr -subj "/C=US/ST=CA/L=San Francisco/O=Elastic/OU=IT/CN=elasticsearch"
          openssl x509 -req -in /certs/elasticsearch.csr -CA /certs/ca.crt -CAkey /certs/ca.key -CAcreateserial -out /certs/elasticsearch.crt -days 3650 -sha256

          # Создание секрета в Kubernetes
          kubectl create secret generic elasticsearch-master-certs \
            --namespace monitoring \
            --from-file=ca.crt=/certs/ca.crt \
            --from-file=tls.crt=/certs/elasticsearch.crt \
            --from-file=tls.key=/certs/elasticsearch.key \
            --dry-run=client -o yaml | kubectl apply -f -
        volumeMounts:
        - name: certs
          mountPath: /certs
      restartPolicy: OnFailure
      volumes:
      - name: certs
        emptyDir: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-gen-sa
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cert-gen-role
  namespace: monitoring
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cert-gen-rolebinding
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cert-gen-role
subjects:
- kind: ServiceAccount
  name: cert-gen-sa
  namespace: monitoring
