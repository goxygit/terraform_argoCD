apiVersion: batch/v1
kind: Job
metadata:
  name: cert-gen
  namespace: monitoring
  labels:
    app: elasticsearch
  annotations:
    argocd.argoproj.io/sync-wave: "0" # Запуск до всех остальных компонентов
spec:
  template:
    spec:
      containers:
        - name: cert-gen
          image: alpine:latest
          command:
            - /bin/sh
            - -c
            - |
              apk add --no-cache openssl;
              mkdir -p /certs;
              # Generate CA key and cert
              openssl genrsa -out /certs/ca.key 4096;
              openssl req -x509 -new -nodes -key /certs/ca.key -sha256 -days 3650 -out /certs/ca.crt -subj "/C=US/ST=CA/L=San Francisco/O=Elastic/OU=IT/CN=ElasticSearch-CA";
              # Generate Elasticsearch key and cert
              openssl genrsa -out /certs/elasticsearch.key 4096;
              openssl req -new -key /certs/elasticsearch.key -out /certs/elasticsearch.csr -subj "/C=US/ST=CA/L=San Francisco/O=Elastic/OU=IT/CN=elasticsearch";
              openssl x509 -req -in /certs/elasticsearch.csr -CA /certs/ca.crt -CAkey /certs/ca.key -CAcreateserial -out /certs/elasticsearch.crt -days 3650 -sha256;
              # Create Kubernetes secret
              kubectl create secret generic elasticsearch-master-certs \
                --namespace monitoring \
                --from-file=ca.crt=/certs/ca.crt \
                --from-file=tls.crt=/certs/elasticsearch.crt \
                --from-file=tls.key=/certs/elasticsearch.key \
                --dry-run=client -o yaml | kubectl apply -f -;
          volumeMounts:
            - name: certs
              mountPath: /certs
      restartPolicy: OnFailure
      volumes:
        - name: certs
          emptyDir: {} # Временное хранилище для генерации файлов
  backoffLimit: 4
